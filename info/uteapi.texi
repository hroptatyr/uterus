@c more complete documentation is of course utefile.h

@defun ute_open path oflags
Open the file in @samp{path} and return a ute context.

Argument @samp{oflags} is like @samp{flags} in @samp{open()}:
@end defun

@defun ute_mktemp oflags
Open a (new) temporary file in @samp{$TMPDIR} and return a ute context.
The file will be opened with @samp{UO_CREAT} and @samp{OFLAGS} will be
widely ignored, i.e. except for:

@verbatim
UO_ANON:
- open a file without a reference in the file system (anonymous inode)
@end verbatim
@end defun

@defun ute_close utectx
Close the context, do final work and free associated resources.

This is in fact short for:
@verbatim
ute_flush(...);
ute_sort(...);
<flush_slut(...);>
ute_free(...);
@end verbatim
@end defun

@defun ute_free utectx
Free all resources associated with @samp{utectx} immediatedly.

If changes are meant to end up on disk call @samp{ute_close()}.
@end defun

@defun ute_flush utectx
Flush any pending write operations.
@end defun

@defun ute_nticks utectx
Return the (total) number of ticks stored in @samp{utectx}.
@end defun

@defun ute_nsyms utectx
Return the number of symbols tracked in @samp{utectx}.
@end defun

@defun ute_fn utectx
Return the file name associated with @samp{utectx}.

In case of anonymous inodes @samp{NULL} will be returned.
@end defun

@defun ute_seek utectx i
Return a pointer to the @samp{i}-th tick in @samp{utectx}.
@end defun

@defun ute_tick utectx tgt i
Obtain the @samp{i}-th tick in @samp{utectx}, put a pointer to it into
@samp{tgt} and return the tick size.
@end defun

@defun ute_add_tick utectx scom
Add the tick pointed to by @samp{scom} to @samp{utectx}.
@end defun

@defun ute_sym2idx utectx sym
Given a symbol @samp{sym} return the index in the look-up table.
@end defun

@defun ute_idx2sym utectx idx
Given an index @samp{idx} return the symbol in the look-up table.
@end defun

@noindent
Using the API as introduced thus far, it's fairly straight-forward to
write ute writer programs:

@example
#include <uterus/uterus.h>

@dots{}

utectx_t u = ute_open("the_output.ute", UO_CREAT | UO_TRUNC | UO_RDWR);
struct sl1t_s tick;

/* timestamp, tick index and tick type */
sl1t_set_stmp_sec(&tick, 1234567890/*2009-02-13 23:31:30*/);
sl1t_set_stmp_msec(&tick, 0);
sl1t_set_tblidx(&tick, 1);
sl1t_set_ttf(&tick, SL1T_TTF_BID);

/* the actual price and quantity 650 pieces for 12.555 */
tick.bid = ffff_m30_get_d(12.5550).u;
tick.bsz = ffff_m30_get_d(650.0).u;

/* add the tick to the file */
ute_add_tick(u, &tick);

/* flush to disk and free resources */
ute_close(u);
@end example

@noindent
Also it is quite straight-forward to reobtain the ticks in such a file:

@example
#include <uterus/uterus.h>

@dots{}

utectx_t u = ute_open("the_input.ute", UO_RDONLY);

if (u && ute_nticks(u) > 0) @{
        sl1t_t tick;
        size_t x = ute_tick(u, AS_SCOM(&tick), 0);

        if (x == sizeof(*tick)) @{
                /* make sure casting actually works */
                double prc = ffff_m30_d(tick.pri);
                double qty = ffff_m30_d(tick.qty);

                printf("price %.4f  quantity %.4f\n", prc, qty);
                /* NOTE: under gcc the transparent_union framework might
                   not work, so the call ffff_m30_d(unsigned int) will
                   trigger a warning or an error.
                   Use: ffff_m30_d(ffff_m30_ui32(@dots{})) in that case. */
        @}
@}

if (u) @{
        /* make sure we free the file descriptor and whatnot */
        ute_close(u);
@}
@end example
