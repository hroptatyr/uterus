#!/bin/sh
# Print a version string.

# Copyright (C) 2007-2010 Free Software Foundation, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This script is derived from GIT-VERSION-GEN from GIT: http://git.or.cz/.
# It may be run two ways:
# - from a git repository in which the "git describe" command below
#   produces useful output (thus requiring at least one signed tag)
# - from a non-git-repo directory containing a .tarball-version file, which
#   presumes this script is invoked like "./git-version-gen .tarball-version".

# In order to use intra-version strings in your project, you will need two
# separate generated version string files:
#
# .tarball-version - present only in a distribution tarball, and not in
#   a checked-out repository.  Created with contents that were learned at
#   the last time autoconf was run, and used by git-version-gen.  Must not
#   be present in either $(srcdir) or $(builddir) for git-version-gen to
#   give accurate answers during normal development with a checked out tree,
#   but must be present in a tarball when there is no version control system.
#   Therefore, it cannot be used in any dependencies.  GNUmakefile has
#   hooks to force a reconfigure at distribution time to get the value
#   correct, without penalizing normal development with extra reconfigures.
#
# .version - present in a checked-out repository and in a distribution
#   tarball.  Usable in dependencies, particularly for files that don't
#   want to depend on config.h but do want to track version changes.
#   Delete this file prior to any autoconf run where you want to rebuild
#   files to pick up a version string change; and leave it stale to
#   minimize rebuild time after unrelated changes to configure sources.
#
# It is probably wise to add these two files to .gitignore, so that you
# don't accidentally commit either generated file.
#
# Use the following line in your configure.ac, so that $(VERSION) will
# automatically be up-to-date each time configure is run (and note that
# since configure.ac no longer includes a version string, Makefile rules
# should not depend on configure.ac for version updates).
#
# AC_INIT([GNU project],
#         m4_esyscmd([build-aux/git-version-gen .tarball-version]),
#         [bug-project@example])
#
# Then use the following lines in your Makefile.am, so that .version
# will be present for dependencies, and so that .tarball-version will
# exist in distribution tarballs.
#
# BUILT_SOURCES = $(top_srcdir)/.version
# $(top_srcdir)/.version:
#	echo $(VERSION) > $@-t && mv $@-t $@
# dist-hook:
#	echo $(VERSION) > $(distdir)/.tarball-version

## keep track of the basedir and our own name
BASEDIR=$(dirname "${0}")
BASESCR=$(basename "${0}")

if test "${#}" -gt 2; then
	echo "Usage: ${BASESCR} VERSION-FILE [TAG-NORMALIZATION-SED-SCRIPT]" >&2
	exit 1
fi

tarball_version_file="${1}"
tag_sed_script="${2:-s/x/x/}"

## Avoid meddling by environment variable of the same name.
v=

## First see if there is a tarball-only version file.
## then try "git describe", then default.
if test -f "${tarball_version_file}"; then
	v=$(head -n 1 -- "${tarball_version_file}") || exit 1
	case "${v}" in
	[0-9a-f]*)
		;;
	*)
		## reset v
		v=
		;;
	esac
	if test -z "${v}"; then
		echo "${BASESCR}: WARNING: " \
			"${tarball_version_file} seems to be damaged" >&2
	fi
fi

if test -d "${BASEDIR}/.git"; then
	## save the ${v} we've got so far
	old_v="${v}"
else
	## otherwise, just go on with the thing we've got so far
	echo -n "${v}"
	exit 0
fi

describe()
{
	REV="${1}"
	git describe --abbrev=8 --match='v[0-9]*' "${REV}" 2>/dev/null || \
		git describe --abbrev=8 "${REV}" 2>/dev/null
}

v=$(describe HEAD | sed "${tag_sed_script}")
if test -n "${v}" && case "${v}" in
	v[0-9]*)
		;;
	*)
		(exit 1)
		;;
	esac; then
	## Is this a new git that lists number of commits since the last
	## tag or the previous older version that did not?
	##   Newer: v6.10-77-g0f8faeb
	##   Older: v6.10-g0f8faeb
	case "${v}" in
	*-*-*)
		: git describe is okay three part flavor
		;;
	*-*)
		: git describe is older two part flavor
		## Recreate the number of commits and rewrite such that the
		## result is the same as if we were using the newer version
		## of git describe.
		vtag=$(echo "${v}" | sed 's/-.*//')
		numcommits=$(git rev-list "${vtag}"..HEAD | wc -l)
		v=$(echo "${v}" | sed "s/\(.*\)-\(.*\)/\1-${numcommits}-\2/")
		;;
	esac
else
	v=$(git show-ref --head --hash=8 HEAD 2>/dev/null | head -n 1)
fi

v=$(echo "${v}" | sed 's/^v//')

# Don't declare a version "dirty" merely because a time stamp has changed.
git update-index --refresh > /dev/null 2>&1

dirty=$(git diff-index --name-only HEAD -- 2>/dev/null) || dirty=
if test -n "${dirty}"; then
	case "${v}" in
	*-dirty)
		;;
	*)
		v="${v}-dirty"
		;;
	esac
fi

# Omit the trailing newline, so that m4_esyscmd can use the result directly.
new_v=$(echo "${v}" | tr -d '\r\n')
if test "${new_v}" = "${old_v}"; then
	## print the old version
	echo -n "${old_v}"
elif test -z "${tarball_version_file}"; then
	echo -n "${new_v}"
else
	echo "${new_v}" | tee -- "${tarball_version_file}" | tr -d '\r\n'
fi

## git-version-gen ends here
